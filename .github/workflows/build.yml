name: Build

on:
  push:
    branches:
      - main

jobs:
  build:
    strategy:
      matrix:
        include:
          #- target: "x86_64-unknown-linux-gnu"
          #  platform: linux/amd64
          #  os: "ubuntu-latest"
          - target: "x86_64-unknown-linux-musl"
            platform: linux/amd64
            os: "ubuntu-latest"
          # - target: aarch64-unknown-linux-gnu
          # os: ubuntu-latest
          #- target: aarch64-apple-darwin
          #  platform: darwin/arm64
          #  os: macos-latest
    
    runs-on: ${{ matrix.os }}
    env:
      RUST_VERSION: '1.76.0'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Cache Cargo dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cargo
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install
      uses: actions-rs/toolchain@v1
      with:
          toolchain: stable
          target: ${{ matrix.target }}
          components: clippy
          override: true

    - name: Install musl-tools
      if: ${{ matrix.target == 'x86_64-unknown-linux-musl' }}
      run: apt update && sudo apt install -y musl-tools      
    
    # rustup target add x86_64-unknown-linux-musl      
    - name: Build
      run: |        
        cargo build --release --target ${{ matrix.target }}

    - name: Archive compiled program
      uses: actions/upload-artifact@v2
      with:
        name: rust-devcontainer-${{ matrix.target }}
        path: ./target/release/${{ matrix.target }}/rust-devcontainer

    - name: Get version from Cargo.toml
      id: get_version
      run: echo "::set-output name=version::$(awk -F'["]' '/^version[ ]*=/ {print $2}' Cargo.toml)"

    - name: Get latest tag
      id: get_latest_tag
      run: |
        latest_tag=$(git tag | sort -g | tail -1)
        echo "::set-output name=latest_tag::${latest_tag}"

    - name: Calculate new tag
      id: calculate_tag
      run: echo "::set-output name=new_tag::$(python3 calculate_tag.py ${{ steps.get_version.outputs.version }} ${{ steps.get_latest_tag.outputs.latest_tag }})"

    - name: Tag output
      run: git tag ${{ steps.calculate_tag.outputs.new_tag }}

    - name: Push tag
      run: git push --tags    

     # Build Docker image  
    - name: Login to Docker Hub container registry
      uses: docker/login-action@v2.1.0
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build and push image to container registry using registry cache
      uses: docker/build-push-action@v4.0.0
      with:
        platforms:  ${{ matrix.platform }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ inputs.image }}:latest-${{ matrix.target }}
          ${{ inputs.image }}:v${{ steps.calculate_tag.outputs.new_tag }}-${{ matrix.target }}
       
    # Build Docker image
    #- name: Build Docker image
    #  run: docker build -t horowitzathome/rust-devcontainer:latest .  

    # Push Docker image to DockerHub
    #- name: Push Docker image to DockerHub
    #  run: docker push horowitzathome/rust-devcontainer:latest  